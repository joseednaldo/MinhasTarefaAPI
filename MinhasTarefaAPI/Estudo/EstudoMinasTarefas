######################################
NOVA API  MINHAS TAREFAS com JWT
#####################################

1- criar o projeto
-Aplicativo Web asp.net core  -> configra a pasta pra salvar
-Escolher opção "API"     posso escolher vazia mas eu crio tudo....
- CRIAR PASTA  modelo

#################################################
44. [ESTUDO] Criando projeto e Modelo Tarefa e
UsuarioDTO
################################################
--criando classe UsuarioDTO

#############################################
45. [ESTUDO] Configurando o Banco de dados e
Relacionamento
##########################################
-criar a pasta DataBase
-criamos o Context 
-configuar o  servico de namco no =>arquivo setup.cs    em
ex:
public void ConfigureServices(IServiceCollection services)
	{
		services.AddControllers();
		services.AddDbContext<MinhasTarefasContext>(op =>
		{
			op.UseSqlite("Data Source=Database\\MinhasTarefas.db");
		});
	}
	
-Instalar o pacote do sqlite.
Microsoft.EntityFrameworkCore.sqlite

#############################################
46. [ESTUDO] MIGRATION E IDENTITY
############################################
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools

comandos:
pm> Add-MIgration bancoInicial
pm>Update-database

Abrir o banco no "LINQPad 5"  e verificar as tabelas que foram criadas... no processo de migration.

#########################################################
47. [ESTUDO]TAREFA MIGRATION DE SICRONIZAÇÃO DA API
##########################################################

Necessidade doi aplicativo:
1-Cadastrar  usuario
2-fazer login   ou seja acessar o sistema app

Ou seja 2 opções no app :
CADASTRAR  = AQUI VAMOS TRABALHAR COM O IDENTITY
ENTRAR     = JWT


OBJETIVO DA API: FAZER BKP DOS DADOS.
#########################################################
48. [ESTUDO]TAREFA UsuarioRepository
##########################################################
pacote using Microsoft.AspNetCore.Identity; 
Usamos esse pacote pra usr o  => UserManager

DICA:
Pra validação podemos usar o recurso "DOMAIN NOTIFICATION" PADRAO USADO, EVITA DE USAR Exception.

public ApplicationUser Obter(string email, string senha)
	{
		// Os metodos ultilizados são assicronos com o result no final tornamos ele  metodos sicronos.
		var usuario=_userManager.FindByEmailAsync(email).Result;
		if (_userManager.CheckPasswordAsync(usuario,senha).Result)
		{
			return usuario;
		}else
		{
			// Pra validação podemos usar o recurso "DOMAIN NOTIFICATION
			throw new Exception("Usuário nao localizado!");
		}
	}


Uso do StringBuilder: para contenar textos...
/*Pra validação podemos usar o recurso "DOMAIN NOTIFICATION*/
	StringBuilder sb = new StringBuilder();
	foreach (var erro in result.Errors)
	{
		sb.Append(erro.Description);
	}
	throw new Exception($"Usuário nao cadastrado! {sb.ToString()}");


#########################################################
49. [ESTUDO]TAREFA TarefaRepository
##########################################################






























82vu4w