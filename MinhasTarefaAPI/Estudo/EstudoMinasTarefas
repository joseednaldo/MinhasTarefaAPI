######################################
NOVA API  MINHAS TAREFAS com JWT
#####################################

1- CRIAR O PROJETO
-APLICATIVO WEB ASP.NET CORE  -> CONFIGURAR A PASTA PRA SALVAR O PROJETO
-ESCOLHER OPÇÃO "API"     POSSO ESCOLHER VAZIA MAS EU CRIO TUDO OU POSSO CRIAR A API  TEMPLATE PADRÃO.
-CRIAR PASTA  MODELO

OBJETIVO:  VAI TER UM BANCO DE DADOS INTERNO ONDE SERÁ POSSIVEL:
1-CADASTRAR  TAREFAS , ALTERAÇÃO, MARCA TAREFAS COMO CONCLUIDA,EXCLUIDA...
OU SEJA AO APP FAZ TODA GESTÃO DOS DADOS.
O APP - FAZ O GERENCIAMENTO DOS DADOS.  PARA ATUALIZAR TRABALHO COM A API... E O BANCO NA NUVEM.


2-API ENTRA APENAS COMO BKP DOS DADOS.
EM TEMPOS E TEMPO VAMOS ENVIDAR OS DADOS PARA SICRONIZAR COMO NOSSA API.
AO FAZER O BKP VAMOS PEGAR AS TAREFAS NA NUVEM.
VAMOS PEGAR OS DADOS NA NUVEM.
VAMOS USAR O JWT PARA AUTENTICA O USUARIO E ACESSAR NOSSA API.



#################################################
44. [ESTUDO] Criando projeto e Modelo Tarefa e
UsuarioDTO
################################################
-CRIAR PASTA MODEL
-CRIANDO CLASSE USUARIODTO





#############################################
45. [ESTUDO] Configurando o Banco de dados e
Relacionamento
##############################################
-CRIAR A PASTA DATABASE
-CRIAMOS O CONTEXT 

-CONFIGUAR O  SERVICO DE NAMCO NO =>ARQUIVO SETUP.CS 
EX:
public void ConfigureServices(IServiceCollection services)
	{
		services.AddControllers();
		services.AddDbContext<MinhasTarefasContext>(op =>
		{
			op.UseSqlite("Data Source=Database\\MinhasTarefas.db");
		});
	}
	
-INSTALAR O PACOTE DO SQLITE.
Microsoft.EntityFrameworkCore.sqlite





#############################################
46. [ESTUDO] MIGRATION E IDENTITY
############################################
	PACKAGE DE INSTALAÇÃO
-MICROSOFT.ENTITYFRAMEWORKCORE
-MICROSOFT.ENTITYFRAMEWORKCORE.TOOLS

COMANDOS DO MIGRATION:
PM> ADD-MIGRATION BANCO_INICIAL
PM>UPDATE-DATABASE      OBS: DE FATO CRIO AS TABELAS.
REMOVE-MIGRATION        OBS: REMOVE O ULTIMO MIGRATION GERADO.

RECURSO *"LINQPad 5") PRA ABRIR O BANCO SQLITE.
ABRIR O BANCO NO "LINQPAD 5"  E VERIFICAR AS TABELAS QUE FORAM CRIADAS... NO PROCESSO DE MIGRATION.




##########################################################
47. [ESTUDO]TAREFA MIGRATION DE SICRONIZAÇÃO DA API
##########################################################

NECESSIDADE DO APLICATIVO:
1-CADASTRAR  	USUARIO
2-FAZER LOGIN   OU SEJA ACESSAR O SISTEMA APP

OU SEJA 2 OPÇÕES NO APP :
CADASTRAR  = AQUI VAMOS TRABALHAR COM O IDENTITY
ENTRAR     = JWT


OBJETIVO DA API: FAZER BKP DOS DADOS.
#########################################################
48. [ESTUDO]TAREFA UsuarioRepository
##########################################################
pacote using Microsoft.AspNetCore.Identity; 
Usamos esse pacote pra usr o  => UserManager

DICA:
Pra validação podemos usar o recurso "DOMAIN NOTIFICATION" PADRAO USADO, EVITA DE USAR Exception.

public ApplicationUser Obter(string email, string senha)
	{
		// Os metodos ultilizados são assicronos com o result no final tornamos ele  metodos sicronos.
		var usuario=_userManager.FindByEmailAsync(email).Result;
		if (_userManager.CheckPasswordAsync(usuario,senha).Result)
		{
			return usuario;
		}else
		{
			// Pra validação podemos usar o recurso "DOMAIN NOTIFICATION
			throw new Exception("Usuário nao localizado!");
		}
	}


Uso do StringBuilder: para contenar textos...
/*Pra validação podemos usar o recurso "DOMAIN NOTIFICATION*/
	StringBuilder sb = new StringBuilder();
	foreach (var erro in result.Errors)
	{
		sb.Append(erro.Description);
	}
	throw new Exception($"Usuário nao cadastrado! {sb.ToString()}");


#########################################################
49. [ESTUDO]TAREFA TarefaRepository
##########################################################
CRIANDO INTERFACE TarefaRepository
VAMOS TER 2 METODOS
1- REPONSAVEL PELA SICRONIZAÇÃO E A RECUPERAÇÃO DA TAREFA.

-void Sicronizacao(List<Tarefa> Tarefas)
recebe uma lista de tarefas, ou seja nessa lista posso ter
varias ações a ser realzando ex: inclusão ,ateração ,exclusao etc.

- List<Tarefa> Restauracao(DateTime dataUltimaSocronizacao);
data do ultimo bkp, recupera os "registros" que foram cadstrados após essa data.
ou sem data pega tudo da base...

Uso do "AsQueryable", para trabalhar com filtro na consulta
lado servidor.


#########################################################
50. [ESTUDO]TAREFA TarefaRepository
##########################################################
codigo os metodos :
Restauracao e Sicronizacao


#########################################################
51. CRIANDO OS CONTROLADOS - USUARIOCONTROLLER
##########################################################
CRIANDO A INJEÇÃO DE DEPENDENCIA DOS REPOSITORIES, NO 
ARQUIVO SETUP.CS.

//registro os repositores como injecção de dependencia.
services.AddScoped<IUsuarioRepository, UsuarioRepository>();
services.AddScoped<ITarefaRepository, TarefaRepository>();

Criando nos Controladores:
usuarioController com "TEMPLATE DE API VAZIO"

:: FAZENDO LOGIN  ::

Usar  a injecao de dependencia:
-private readonly SignInManager<ApplicationUser> _signInManager;

_signInManager.SignInAsync(usuario, false);
Se fosse uma aplicação web provavelmente a gente nao colocaria 
"false" no segundo parametro, usariamos um coockie pra manter o estado.
Como estamos fazendo api nao precisamos manter estado.




#########################################################
52. CRIANDO OS CONTROLADOS - USUARIOCONTROLLER
##########################################################
CADASTRANDO USUARIO.

Usar  a injecao de dependencia:
-private readonly UserManager<ApplicationUser> _userManager;






#########################################################
53. CRIANDO OS CONTROLADOR - TAREFACONTROLLER
##########################################################
TEMOS  2 METODOS:
Sincronizar E Restaurar


Dica:
Recuperamos o usuario logado...

private readonly UserManager<ApplicationUser> _userManager;
var usuario = _userManager.GetUserAsync(HttpContext.User).Result;





#########################################################
AULA 54/55					TESTANDO API POSTMAN / JWT
CADASTRO DE LOGIN
##########################################################

Criando o serviço no metodo : ConfigureServices
// já é a configuração pra usar o dentity como serviço....
#region  Trabalhando com autenticação de usuarios  
services.AddDefaultIdentity<ApplicationUser>().AddEntityFrameworkStores<MinhasTarefasContext>();  
#endregion


Usar no metodo : Configure
app.UseAuthentication();

################################
TESTANDO API: CADASTRAR E LOGIN
cadastro de usuario
#############################
EX:cadastrnado usuario
{
    "nome":"jose ednaldo",
    "email":"jose@ig.com.br",
    "senha":"123456Ed!",
    "confirmacaosenha":"123456Ed!"
}

resultdo final do cadastrado:
{
    "fullName": "jose ednaldo",
    "tarefas": null,
    "id": "2ec3f4d6-89c3-4d78-957e-d3cc994ed396",
    "userName": "jose@ig.com.br",
    "normalizedUserName": "JOSE@IG.COM.BR",
    "email": "jose@ig.com.br",
    "normalizedEmail": "JOSE@IG.COM.BR",
    "emailConfirmed": false,
    "passwordHash": "AQAAAAEAACcQAAAAEAHJHF1sfAGn7Gjle6JZCsS9cTQHABj5tss6kF/WcGKFmKcp/EJFcsC9kPmd+z13+A==",
    "securityStamp": "5OQIGN4XWCHWHASREUTCRCZ5ONCEWC5P",
    "concurrencyStamp": "79e64d76-0dcb-4de9-8df9-faad9b7a51dd",
    "phoneNumber": null,
    "phoneNumberConfirmed": false,
    "twoFactorEnabled": false,
    "lockoutEnd": null,
    "lockoutEnabled": true,
    "accessFailedCount": 0
}


EX: CRIAR MODELO DE TAREFA
{
    "idTarefaApi": 0,
    "idTarefaApp": 0,
    "titulo": null,
    "dataHora": "0001-01-01T00:00:00",
    "local": null,
    "descricao": null,
    "tipo": null,
    "concluido": false,
    "excluido": false,
    "criado": "0001-01-01T00:00:00",
    "atualizado": "0001-01-01T00:00:00",
    "usuarioId": null,
    "usuario": null
}
EX: CRIAR MODELO DE TAREFA
[{
    "idTarefaApi": 0,
    "idTarefaApp": 2,
    "titulo": "TAREFA 1",
    "dataHora": "2019-01-09T00:00:00",
    "local": "Ginasio - df",
    "descricao": "evento-show",
    "tipo": "Casa",
    "concluido": false,
    "excluido": false,
    "criado": "2019-01-09T00:00:00",
    "atualizado": "2019-01-09T00:00:00",
    "usuarioId": "01e27c57-da4e-4460-862d-0dbb2d382d95",
    "usuario": null
}]


RESULTADO DO CADASTRO DE USUARIO.
{
    "fullName": "moncerra",
    "tarefas": null,
    "id": "32d05ede-f4f8-4668-8d48-58972bd380fa",
    "userName": "moncerra@ig.com.br",
    "normalizedUserName": "MONCERRA@IG.COM.BR",
    "email": "moncerra@ig.com.br",
    "normalizedEmail": "MONCERRA@IG.COM.BR",
    "emailConfirmed": false,
    "passwordHash": "AQAAAAEAACcQAAAAEPyk0ernPuLVDT2DFNjJjuDmwtBO+OPZKCG9PmerABT3BjUqH6svs/xjrzsuhaVQcw==",
    "securityStamp": "FOPVWGEZBKYGXTXLXXTU6MNM2FZVU6ZG",
    "concurrencyStamp": "f3104ac7-4dfc-4a9b-9a60-8ce062b5719f",
    "phoneNumber": null,
    "phoneNumberConfirmed": false,
    "twoFactorEnabled": false,
    "lockoutEnd": null,
    "lockoutEnabled": true,
    "accessFailedCount": 0
}



login 
{
    "email":"daniele@ig.com.br",
    "senha":"123456Ed!!!"
}
e758ae5b-b02e-4688-aa7f-e04e1e6aecf8


cadastro

{
    "fullName": "maria",
    "tarefas": null,
    "id": "ad45da59a-a513-476e-9522-a4f4368007bf",
    "userName": "maria@ig.com.br",
    "normalizedUserName": "MARIA@IG.COM.BR",
    "email": "maria@ig.com.br",
    "normalizedEmail": "MARIA@IG.COM.BR",
    "emailConfirmed": false,
    "passwordHash": "AQAAAAEAACcQAAAAED8eYRY5bHytvGVQ+DnZ3hPM4pGG7TZq0SJE1hNI0YKfjz6Ov/MbKUbrTnwaLEMQew==",
    "securityStamp": "Y6IM4BPNUO6P5QA64NJTKBAUQ4TJW7BA",
    "concurrencyStamp": "ef06e6e6-503d-4eb9-adff-7bd9c07adf9e",
    "phoneNumber": null,
    "phoneNumberConfirmed": false,
    "twoFactorEnabled": false,
    "lockoutEnd": null,
    "lockoutEnabled": true,
    "accessFailedCount": 0
}
#########################################################
AULA 56		TESTANDO API		- SICRONIZAR E RESTAURAR
##########################################################

TESTES OK. GERAL



#########################################################
AULA 57		   REDIRECIONANDO LOGIN
#########################################################

Já é a configuração pra usar o dentity como serviço
AddDefaultIdentity  = CHAMA O UI, nossa api não precisa disso, serve pra trazer as telas de interface graficas.
pra resolver isso retiramos o Default. Evita chamar de tela de login...


//services.AddDefaultIdentity<ApplicationUser>().AddEntityFrameworkStores<MinhasTarefasContext>(); 
services.AddIdentity<ApplicationUser,IdentityRole>().AddEntityFrameworkStores<MinhasTarefasContext>();


:: Configurando o serviço para quando o usuário nao tiver logado, vamos tratar a mensagem 401 no arquivo setup.cs ::
services.ConfigureApplicationCookie(options=>{
	options.Events.OnRedirectToLogin = context => { 
		context.Response.StatusCode = 401;
		return Task.CompletedTask;
	};
});



#########################################################
AULA 58		 JSON WEB TOKEN  - JWT
#########################################################

PRA QUE USAR "TOKEN" EM UMA API.
OBS: AS APIS SÃO STATELESS OU SEJA NAO TEM ESTADO, NÃO USA COOKIES /SESSION.
APIS SÃO STATELESS, O "TOKEN" SERVE PARA RECONHECER O USUÁRIO E SUAS CARACTERISTICAS  (PERMISSÕES)

DICAS:
EM UM SISTEMA TRADICINAL NOS GUARDAMOS O "ESTADO"  OU SEJA OS DADOS DO USUARIO QUE LOGOU 
NO SISTEMA.
MAS EM APIS NAO FAEZEMOS ISSO.

####
SENDO ASSIM NOSSAS APIS PRECISA IDENTIFICAR O USUARIO COM ALGUM IDENTIFICADOR, AO QUE 
ENTRA OS TOKEN.
####
O TOKEN É A IDENTIFICAÇÃO DO USUARO PRA USAR A API.
A VISÃO É TODA VEZ QUE É FEITO UM LOGIN , DAMOS O USUARIO UM TOKEN
PRA QUELE POSSA SER IDENTIFICADO NA API PRA FAZER AS REQUISIÇÕES.

###########
JWT É PADRÃO JA UTILIZADO NA WEB.
##########
BASEADO EM JSON.
US O HASH
LEVE: PORQUE USA JSON.
SEGURO: PORQUE USA  HASH PARA VALIDAR A INTEGRIDADE DO TOKEN
AUTOCONTIDA: POSSUI TODAS AS INFORMAÇÕES NECESSAÁRIAS PARA SE PROCESSAMENTO.


JWT TEM 3 GRUPOS:

1- CABEÇALHO (HEADER)  - > {"ALG":"HS256"
							"TYP": "JWT"}
É O TIPO DE ALGORITIMO ULTILIZADO

2-CARGA UTIL (PAYLOAD)    = OS DADOS QUE SERÃO CRIPTOGRAFADO.  EX: USUARIO, NOME , PERMISSAO, CPF ETC....
3-ASSINATURA (SIGNATURE)  = VAI VALDIAR A INTEGRIDADE  


DICAS:
EXISTE VARIOS TIPOS NO JWT PARA UTILIZADO.


#########################################################
AULA 59/60		GERANDO O JWT   PARTE 1 E 2
#########################################################
::FERRAMENTAS DE INSTALAÇÃO / PACKAGE 

Install-Package
System.IdentityModel.Tokens.Jwt

site do jtw = https://jwt.io/

:: PRINCIPAIS CARACTERISTICAS ::
Sign   		=
Verify		=
*iss check	= REPRESENTA QUEM É QUE ESTA EMITINDO O COOKIES , NESSE CASO É O DOMINIO DO MEU SITE.  "QUEM ESTA EMITINDO"
sub check	= IDENTIFICA O USUARIO
*aud check	= REPRESENTA PRA QUEM ESTOU EMITINDO ESSE TOKEN. "PRA QUEM ESTOU EMITINDO"
exp check	= DATA DE EXPIRAÇÃO DO TOKEN
nbf check	= DATA PRA COMEÇAR A VALIDADE DO TOKEN
iat check	= DATA DE CRIAÇÃO DO TOKEN
jti check	= CODIGO UNICO PRA IDENTIFICAR O TOKEN, NOS PODEMOS CRIAR ELE.

#########################################################
AULA 61		GERANDO O JWT  PARTE 3
#########################################################

ALTERAÇÃO NO ARQUIVO SETUP.CS


O TokenValidationParameters trabalha em conjunto com [Authorize].
options.TokenValidationParameters = new TokenValidationParameters()
{
	//aqui indicamos o que será validado.
};

//Verifica o esquema de autenticação,verifica o usuario e 
services.AddAuthorizationCore


/*Configurando o serviço para quando o usuário nao tiver logado, vamos tratar a mensagem 404*/
services.ConfigureApplicationCookie(options=>{



#########################################################
AULA 62		REMOVENDO O COOKIE AO LOGAR  PARTE 4
#########################################################

-O LOGIN USA O IDENTITY QUE QUARDO UM COOKIE,
ELE NÃO É MAIS NECESSARIO.


--NÃO É MAIS NECESSARIO.
ELE UTILIZA O COOKIEBUIDER PRA GUARDA OS DADOS DO USUARIO LOGADO.
VAMOS USAR AGORA O JTW QUE NAO GAURDA ESTADO.

//_signInManager.SignInAsync(usuario, false);    




#########################################################
AULA 63		RENOVANDO JWT  PARTE 5
#########################################################

1-Reflesh token.
fazer uam renovação mais rapida.
vamos ter uma tabela para gravar os tokens anterior.
2-fazer que o próprio aplication faça o login novamente.

#########################################################
AULA 64		RENOVANDO JWT  PARTE 6
#########################################################
-criando o repositore token


#########################################################
AULA 67		RENOVANDO JWT  PARTE 7
#########################################################
























































































82vu4w